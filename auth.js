const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
const dotenv = require("dotenv");
const { findUserByEmail, addUser } = require("./db");

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ .env
dotenv.config();

console.log("üîπ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ SECRET_KEY:", process.env.SECRET_KEY); // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ .env –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤—Å—è

const SECRET_KEY = process.env.SECRET_KEY;
const ADMIN_API_KEY = process.env.ADMIN_API_KEY;

if (!SECRET_KEY) {
  throw new Error("‚ùå SECRET_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ .env —Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä.");
}

// –§—É–Ω–∫—Ü—ñ—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
function registerUser(email, password) {
  if (findUserByEmail(email)) {
    throw new Error("‚ùå –¶–µ–π email –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π!");
  }

  const newUser = addUser(email, password);
  const accessToken = jwt.sign({ userId: newUser.id }, SECRET_KEY, { expiresIn: "15m" });
  const refreshToken = jwt.sign({ userId: newUser.id }, SECRET_KEY, { expiresIn: "7d" });

  return { user: newUser, accessToken, refreshToken };
}

// –§—É–Ω–∫—Ü—ñ—è –ª–æ–≥—ñ–Ω—É
function login(email, password) {
  const user = findUserByEmail(email);
  if (!user || !bcrypt.compareSync(password, user.password)) {
    throw new Error("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å");
  }

  const accessToken = jwt.sign({ userId: user.id }, SECRET_KEY, { expiresIn: "15m" });
  const refreshToken = jwt.sign({ userId: user.id }, SECRET_KEY, { expiresIn: "7d" });

  return { accessToken, refreshToken };
}

module.exports = { login, registerUser };
